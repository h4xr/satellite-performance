---
- hosts: docker-hosts
  remote_user: root
  gather_facts: no
  vars_files:
    - ../../conf/satperf.yaml
    - ../../conf/satperf.local.yaml
  vars:
    # TODO: Move these variables into conf/satperf.yaml
    tags: "untagged,REGTIMEOUTTWEAK,REG,DOWNGRADE,REM"   # Register systems with client timeout tweak and setup ReX
    ###tags: "untagged,REGTIMEOUTTWEAK,REG,DOWNGRADE,KAT..."   # Register systems and setup katello-agent
    ###tags: "untagged,REGTIMEOUTTWEAK,REG,DOWNGRADE,PUP..."   # Register systems and setup Puppet
    size: 10   # TODO: would be nice to provide total expected number and that would be divided by number of docker hosts
    use_only_fresh: true   # should we use only containers which were not registered yet?
    resting: 0
  tasks:
    - name: "Ansible on docker host configured to ignore host keys"
      command:   # FIXME: Use lineinfile
        sed -i 's|^.*host_key_checking.*$|host_key_checking = False|' /etc/ansible/ansible.cfg

    - name: "Load number of already registered containers"
      command:
        cat /root/container-used-count
      register: containers_used_count_cmd
      ignore_errors: true
      when: "use_only_fresh"
    - name: "Set number of used containers to 0"
      set_fact:
        containers_used_count: 0
      when: "not use_only_fresh or containers_used_count_cmd.rc != 0"
    - name: "Set number of used containers based on file"
      set_fact:
        containers_used_count: "{{ containers_used_count_cmd.stdout|int }}"   # Warning: this is still string: https://github.com/ansible/ansible/issues/15249
      when: "use_only_fresh and containers_used_count_cmd.rc == 0"

    - name: "Generate list of containers we are going to use"
      shell:
        head -n "{{ containers_used_count|int + size|int }}" /root/container-ips.shuffled | tail -n "{{ size }}" | cut -d ' ' -f 2 > clients.ini
    - name: "Determine log name"
      set_fact:
        clients_yaml_cmd_log: "/root/out-{{ lookup('pipe', 'date --iso-8601=seconds') }}.log"
    - name: "Run clients.yaml"
      shell:
        ansible-playbook --private-key /root/id_rsa_key -f "{{ size }}" -i clients.ini --extra-vars "server={{ tests_registration_target|default(groups['satellite6']|first) }}" --tags "{{ tags }}" clients.yaml &> "{{ clients_yaml_cmd_log }}"
      register: clients_yaml_cmd
      ignore_errors: true

    - name: "Get how long registration took"
      shell:
        grep '"msg". "Register ' "{{ clients_yaml_cmd_log }}" | cut -d '"' -f 4
      register: clients_yaml_reg_timings
    - name: "Show how long registration took"
      debug:
        var: clients_yaml_reg_timings.stdout_lines

    ###- debug: var="('2017-05-20 15:59:13.223808'|to_datetime('%Y-%m-%d %H:%M:%S.%f')).epoch"   # FIXME: why this does not work? Replace these lookup usages with this
    ###  delegate_to: 127.0.0.1
    ###  run_once: true
    - name: "Determine timezone"
      command:
        date +%z
      register: date_z_cmd
    - set_fact:
        start_time: "{{ lookup('pipe', 'date --utc -d \"{{ clients_yaml_cmd.start }} {{ date_z_cmd.stdout }}\" +%s') }}"
    - set_fact:
        end_time: "{{ lookup('pipe', 'date --utc -d \"{{ clients_yaml_cmd.end }} {{ date_z_cmd.stdout }}\" +%s') }}"

    - name: "DEBUG: stderr"
      debug:
        msg: "{{ clients_yaml_cmd.stderr_lines }}"
    - name: "DEBUG: result"
      debug:
        msg: "rc:{{ clients_yaml_cmd.rc }} size:{{ size }} tags:{{ tags }} start:{{ clients_yaml_cmd.start }} end:{{ clients_yaml_cmd.end }} seconds:{{ end_time|int - start_time|int }}"

    - name: "Increment number of already registered containers"
      shell:   # FIXME: Use lineinfile or so
        echo "{{ containers_used_count|int + size|int }}" >/root/container-used-count

    - name: "Give server some time to rest"
      pause:
        seconds: "{{ resting }}"

    # FIXME: Takes into account start/end time from only one (random) docker host (should from min(start) to max(end))
    - debug:
        msg: "Graphs: http://{{ grafana_host }}:{{ grafana_port }}/dashboard/db/satellite6-general-system-performance?from={{ start_time|int - 10 }}000&to={{ end_time|int + resting|int + 10 }}000&var-Cloud=satellite62&var-Node=gprfc019-vm1_sbu_lab_eng_bos_redhat_com"
      run_once: true
      ignore_errors: true
    - set_fact:
        filename_base: "graph-{{ lookup('pipe', 'date --iso-8601=seconds') }}"
      run_once: true
      delegate_to: 127.0.0.1
    - name: "Save Grafana load graf to {{ lookup('pipe', 'pwd') }}/../../{{ filename_base }}-*.png"
      get_url:
        url: "http://{{ grafana_host }}:{{ grafana_port }}/render/dashboard-solo/db/satellite6-general-system-performance?from={{ start_time|int - 10 }}000&to={{ end_time|int + resting|int + 10 }}000&var-Cloud=satellite62&var-Node=gprfc019-vm1_sbu_lab_eng_bos_redhat_com&fullscreen&var-Interface=interface-eth0&var-Disk=disk-vda&var-cpus0=All&var-cpus00=All&panelId={{ item.panelId }}&width=1500&height=500"
        dest: "{{ lookup('pipe', 'pwd') }}/../../{{ filename_base }}-{{ item.name }}.png"
      run_once: true
      delegate_to: 127.0.0.1
      ignore_errors: yes
      with_items:
        - name: load
          panelId: 27
        - name: mem
          panelId: 5
        - name: swap
          panelId: 7
        - name: swap_io
          panelId: 8
        - name: sat6_proc_mem_sum
          panelId: 56
        - name: sat6_proc_cpu_sum
          panelId: 43
...
